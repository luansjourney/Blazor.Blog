@page "/create"
@inject Blazor.Blog.Client.Services.IBlogService BlogService
@inject NavigationManager NavigationManager

<h3>Create a new Blog Post</h3>

<EditForm Model="@newBlogPost" OnValidSubmit="@CreateNewBlogPost">
	<DataAnnotationsValidator />
	
	<div class="form-group">
		<label for="title">Title</label>
		<InputText id="title" @bind-Value="newBlogPost.Title" class="form-control"></InputText>
		<ValidationMessage For="@(() => newBlogPost.Title)"/>
	</div>
	

	<div class="form-group">
		<label for="url">Url</label>
		<InputText id="url" @bind-Value="newBlogPost.Url" class="form-control"></InputText>
		<ValidationMessage For="@(() => newBlogPost.Url)" />
	</div>

	<div class="form-group">
		<label for="image">Image</label>
		<InputFile OnChange="OnFileChange" accept="image/x-png" title="Upload png image"  />
	</div>

	<div class="form-group">
		<label for="description">Description</label>
		<InputText id="description" @bind-Value="newBlogPost.Description"  class="form-control"></InputText>
	</div>

	<div class="form-group">
		<label for="content">Content</label>
		<BlogTextArea id="content" @bind-Value="newBlogPost.Content" class="form-control" />
		<ValidationMessage For="@(() => newBlogPost.Content)" />
	</div>
	<div class="form-group">
		<label for="contentPreview">Content Preview</label>
		<div id="contentPreview" class="form-control content-previewer" >
			@((MarkupString)Markdown.ToHtml(newBlogPost.Content))
		</div>
	</div>

	<div class="form-group">
		<label for="date">Date</label>
		<InputDate id="date" @bind-Value="newBlogPost.DateCreated" class="form-control"></InputDate>
	</div>

	<div class="form-check">
		<InputCheckbox id="isPublish" @bind-Value="newBlogPost.IsPublished" class="form-check-input"></InputCheckbox>
		<label for="isPublish">Publish</label>
	</div>
	<button type="submit" class="btn btn-primary">Create</button>
</EditForm>

@code {
	BlogPost newBlogPost = new Blazor.Blog.Shared.Model.BlogPost();

	async Task CreateNewBlogPost()
	{
		var result = await BlogService.CreateNewPost(newBlogPost);
		NavigationManager.NavigateTo($"posts/{result.Url}");
	}

	async Task OnFileChange(InputFileChangeEventArgs e)
	{
		var format = "image/png";
		var resizedImage = await e.File.RequestImageFileAsync(format, 1060, 1060);
		var buffer = new byte[resizedImage.Size];
		await resizedImage.OpenReadStream().ReadAsync(buffer);
		var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
		newBlogPost.Image = imageData;

	}
}
